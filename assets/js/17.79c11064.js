(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{380:function(e,a,s){"use strict";s.r(a);var t=s(1),n=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Docker相关的一些安装、命令、操作记录。")]),e._v(" "),a("h2",{attrs:{id:"docker-基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-基本概念"}},[e._v("#")]),e._v(" Docker 基本概念")]),e._v(" "),a("h3",{attrs:{id:"windows-安装-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#windows-安装-docker"}},[e._v("#")]),e._v(" Windows 安装 Docker")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://hub.docker.com/editions/community/docker-ce-desktop-windows",target:"_blank",rel:"noopener noreferrer"}},[e._v("下载"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://hub.docker.com/signup",target:"_blank",rel:"noopener noreferrer"}},[e._v("注册"),a("OutboundLink")],1)])]),e._v(" "),a("p",[a("strong",[e._v("打开"),a("code",[e._v("CMD")]),e._v("或"),a("code",[e._v("Powershell")]),e._v("就可以愉快的玩耍Docker了")])]),e._v(" "),a("h3",{attrs:{id:"ubuntu-安装-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu-安装-docker"}},[e._v("#")]),e._v(" Ubuntu 安装 Docker")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("// Ubuntu 自带docker.io源\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" docker.io "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v("\n")])])]),a("h3",{attrs:{id:"常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),a("div",{staticClass:"language-cmd extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 基本\ndocker version // 查看版本详情\ndocker -v      // 查看版本简单版\n\n// 搜索\ndocker search ubuntu\n\n// 拉取\ndocker pull ubuntu:latest // tag：最新版\ndocker images             // 查看本地镜像\n\n// 创建(类似安装系统)\ndocker run -it -p 8080:8080 ubuntu /bin/bash  // -it表示打开并保持stdout，并分配一个终端（pseudo-tty）\ndocker run -d -p 80:80 --name [myname] nginx\n\n// 退出\nexit                     // 容器关闭，状态为：Exit\n快捷键 ctrl+p ctrl+q     // 后台运行，状态为：Up\ndocker ps -a             // 查看状态\n\n// 操作容器\ndocker start CONTAINERID              // 启动\ndocker stop CONTAINERID               // 停止\ndocker restart CONTAINERID            // 重启\ndocker attach CONTAINERID             // 进入\ndocker exec -it CONTAINERID /bin/bash // 进入（如创建时未it）\n\n// 提交镜像到本地仓库\ndocker commit -m "msg" -a "Author" CONTAINERID 用户名/仓库名:tag\n\n// 删除镜像\ndocker rm CONTAINERID  // 必须先删除所有容器\ndocker rmi IMAGESID    // 接着删除镜像\n\n// 提交镜像到hub\ndocker push 用户名/仓库名:tag\n\n')])])]),a("h3",{attrs:{id:"dockerfile常用参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile常用参数"}},[e._v("#")]),e._v(" Dockerfile常用参数")]),e._v(" "),a("div",{staticClass:"language-cmd extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("FROM        // 指定构建镜像的基础源镜像\nMAINTAINER  // 维护者的信息\nRUN         // 在当前镜像基础上执行指定命令\nCMD         // 启动容器时提供一个默认的命令执行选项\nEXPOSE      // 服务端容器对外映射的本地端口\nENV         // 指定一个环节变量，会被后续RUN指令使用，并在容器运行时保留\nADD         // 复制本地主机文件、目录或者远程文件URLS从并且添加到容器指定路径中，支持正则模糊匹配\nCOPY        // 复制新文件或者目录从并且添加到容器指定路径中 \nVOLUME      // 创建一个可以从本地主机或其他容器挂载的挂载点\nWORKDIR     // 为后续的RUN、CMD、ENTRYPOINT指令配置工作目录。可以使  用多个WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指  定的路径\n\n// 构建镜像\ndocker build -t name 目录 // 当前目录用`.`表示\n")])])]),a("h3",{attrs:{id:"wsl相关问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wsl相关问题"}},[e._v("#")]),e._v(" WSL相关问题")]),e._v(" "),a("p",[e._v("打开"),a("code",[e._v("PowerShell")]),e._v(",运行：")]),e._v(" "),a("div",{staticClass:"language-cmd extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ubuntu config --default-user root  // 默认root登录\n\n// 进入ubuntu系统，设置默认连接windows的守护进程\nvi ~/.bashrc                               // 打开\nexport DOCKER_HOST=tcp://127.0.0.1:2375    // 最后一行添加\nsource ~/.bashrc                           // 运行下\n")])])]),a("h3",{attrs:{id:"docker-compose-yml常用参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml常用参数"}},[e._v("#")]),e._v(" docker-compose.yml常用参数")]),e._v(" "),a("div",{staticClass:"language-cmd extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('version: "3"\nservices:\n  web:                              # 自定义服务名叫web\n    image: username/repo:tag\n    deploy:\n      replicas: 5                   # 运行5个实例作为一个服务\n      resources:\n        limits:\n          cpus: "0.1"               # 每个实例最多使用10%CPU\n          memory: 50M               # 每个实例最多使用50MB的RAM\n      restart_policy:\n        condition: on-failure       # 如果容器出错，立即重启\n    ports:\n      - "4000:80"\n    networks:\n      - webnet                      # 负载平衡网络\nnetworks:\n  webnet:\n')])])]),a("h3",{attrs:{id:"swarm-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swarm-常用命令"}},[e._v("#")]),e._v(" Swarm 常用命令")]),e._v(" "),a("div",{staticClass:"language-cmd extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 基本\ndocker swarm init                                // 初始化swarm\ndocker stack deploy -c docker-compose.yml name   // 部署新堆栈或更新现有堆栈\n\ndocker stack ls                                 // 列出现有堆栈\ndocker service ls                               // 查看服务\ndocker service ps name                          // 查看实例\ndocker container ls -q                          // 查看所有容器id\ndocker stack rm name                            // 退出程序\ndocker swarm leave --force                      // 退出swarm\nsystemctl restart docker                        // 重启swarm\n\n")])])]),a("h3",{attrs:{id:"使用阿里云镜像库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用阿里云镜像库"}},[e._v("#")]),e._v(" 使用阿里云镜像库")]),e._v(" "),a("div",{staticClass:"language-cmd extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# 登陆\ndocker login --username=master@bingblue.com registry.cn-shanghai.aliyuncs.com\n\n# 提交\ndocker tag [ImageId] registry.cn-shanghai.aliyuncs.com/bingblue/[镜像名]:[镜像版本号]\ndocker push registry.cn-shanghai.aliyuncs.com/bingblue/[镜像名]:[镜像版本号]\n")])])]),a("h3",{attrs:{id:"docker-images-版本区分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-images-版本区分"}},[e._v("#")]),e._v(" Docker images 版本区分")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("alpine")]),e._v(": linux发行版,只有5M,几乎无软件仓库支持")]),e._v(" "),a("li",[a("code",[e._v("stretch")]),e._v(": Debian 9 的代号,2017年发行")]),e._v(" "),a("li",[a("code",[e._v("jessie")]),e._v(": Debian 8 的代号,2015年发行")]),e._v(" "),a("li",[a("code",[e._v("wheezy")]),e._v(": Debian 7 的代号,2013年发行")]),e._v(" "),a("li",[a("code",[e._v("slim")]),e._v(": 瘦身版,比如"),a("code",[e._v("xxx-jessie-slim")]),e._v("就是基于"),a("code",[e._v("jessie")]),e._v("的瘦身版")]),e._v(" "),a("li",[a("code",[e._v("perl")]),e._v(": nginx支持perl模块的版本")]),e._v(" "),a("li",[a("code",[e._v("mainline")]),e._v(": nginx目前主力在做的版本,可以说是开发版")]),e._v(" "),a("li",[a("code",[e._v("stable")]),e._v(": 稳定版")]),e._v(" "),a("li",[a("code",[e._v("chakracore")]),e._v(": 基于Edge浏览器的"),a("code",[e._v("ChakraCore")]),e._v("引擎的node版本")])]),e._v(" "),a("p",[a("strong",[e._v("总结：推荐使用"),a("code",[e._v("alpine")]),e._v("，其次推荐"),a("code",[e._v("slim")])])]),e._v(" "),a("h2",{attrs:{id:"实战-项目部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战-项目部署"}},[e._v("#")]),e._v(" 实战：项目部署")]),e._v(" "),a("h3",{attrs:{id:"一、编写docker-compose-yml文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、编写docker-compose-yml文件"}},[e._v("#")]),e._v(" 一、编写docker-compose.yml文件")]),e._v(" "),a("div",{staticClass:"language-compose extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("version: '3.6'\nservices:\n  # nginx 略...\n  # mysql 略...\n  # xbjh_admin 略...\n  # xbjh 略...\nnetworks:\n  bingblue:\n    driver: overlay\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.88.0.0/16\n")])])]),a("p",[a("strong",[e._v("然后上传到服务器，目录"),a("code",[e._v("/root/yml/docker-compose.yml")])])]),e._v(" "),a("h3",{attrs:{id:"二、部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、部署"}},[e._v("#")]),e._v(" 二、部署")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 初始化Swarm集群")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" swarm init --advertise-addr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("IP地址"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建目录")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" nginx             // 并在此目录下上传Nginx配置文件 default.conf\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" mysql\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" xbjh_admin\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" xbjh_admin/file\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" xbjh_admin/log\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 登陆阿里云私有库账号")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" login "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--username")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("master@bingblue.com registry.cn-shanghai.aliyuncs.com\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 进入yml目录")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /root/yml\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 部署新堆栈或更新现有堆栈")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" stack deploy "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-c")]),e._v(" docker-compose.yml "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("堆栈名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" --with-registry-auth\n")])])]),a("h3",{attrs:{id:"三、项目更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、项目更新"}},[e._v("#")]),e._v(" 三、项目更新")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 修改docker-compose.yml并上传")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /root/yml\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 更新现有堆栈")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" stack deploy "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-c")]),e._v(" docker-compose.yml xbjh --with-registry-auth\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 单独重启某个Service")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" update "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--force")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Service ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("h3",{attrs:{id:"四、注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、注意事项"}},[e._v("#")]),e._v(" 四、注意事项")]),e._v(" "),a("ul",[a("li",[e._v("✅ 记得阿里云配置安全组入方向规则")]),e._v(" "),a("li",[e._v("✅ 配置HTTPS和CDN时要设置: "),a("code",[e._v("协议跟随回源")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);